/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Claudio Pastorini
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package uk.projectchronos.xplorationreader.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;
import uk.projectchronos.xplorationreader.model.Article;
import uk.projectchronos.xplorationreader.model.Keyword;
import uk.projectchronos.xplorationreader.model.KeywordToArticles;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 *
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig keywordDaoConfig;
    private final DaoConfig keywordToArticlesDaoConfig;
    private final DaoConfig articleDaoConfig;

    private final KeywordDao keywordDao;
    private final KeywordToArticlesDao keywordToArticlesDao;
    private final ArticleDao articleDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        keywordDaoConfig = daoConfigMap.get(KeywordDao.class).clone();
        keywordDaoConfig.initIdentityScope(type);

        keywordToArticlesDaoConfig = daoConfigMap.get(KeywordToArticlesDao.class).clone();
        keywordToArticlesDaoConfig.initIdentityScope(type);

        articleDaoConfig = daoConfigMap.get(ArticleDao.class).clone();
        articleDaoConfig.initIdentityScope(type);

        keywordDao = new KeywordDao(keywordDaoConfig, this);
        keywordToArticlesDao = new KeywordToArticlesDao(keywordToArticlesDaoConfig, this);
        articleDao = new ArticleDao(articleDaoConfig, this);

        registerDao(Keyword.class, keywordDao);
        registerDao(KeywordToArticles.class, keywordToArticlesDao);
        registerDao(Article.class, articleDao);
    }

    public void clear() {
        keywordDaoConfig.getIdentityScope().clear();
        keywordToArticlesDaoConfig.getIdentityScope().clear();
        articleDaoConfig.getIdentityScope().clear();
    }

    public KeywordDao getKeywordDao() {
        return keywordDao;
    }

    public KeywordToArticlesDao getKeywordToArticlesDao() {
        return keywordToArticlesDao;
    }

    public ArticleDao getArticleDao() {
        return articleDao;
    }

}
