/*
 * Copyright 2014-2015 Project Chronos and Pramantha Ltd
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package uk.projectchronos.xplorationreader.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;
import uk.projectchronos.xplorationreader.model.Article;
import uk.projectchronos.xplorationreader.model.Keyword;
import uk.projectchronos.xplorationreader.model.KeywordToArticles;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 *
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig keywordDaoConfig;
    private final DaoConfig keywordToArticlesDaoConfig;
    private final DaoConfig articleDaoConfig;

    private final KeywordDao keywordDao;
    private final KeywordToArticlesDao keywordToArticlesDao;
    private final ArticleDao articleDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        keywordDaoConfig = daoConfigMap.get(KeywordDao.class).clone();
        keywordDaoConfig.initIdentityScope(type);

        keywordToArticlesDaoConfig = daoConfigMap.get(KeywordToArticlesDao.class).clone();
        keywordToArticlesDaoConfig.initIdentityScope(type);

        articleDaoConfig = daoConfigMap.get(ArticleDao.class).clone();
        articleDaoConfig.initIdentityScope(type);

        keywordDao = new KeywordDao(keywordDaoConfig, this);
        keywordToArticlesDao = new KeywordToArticlesDao(keywordToArticlesDaoConfig, this);
        articleDao = new ArticleDao(articleDaoConfig, this);

        registerDao(Keyword.class, keywordDao);
        registerDao(KeywordToArticles.class, keywordToArticlesDao);
        registerDao(Article.class, articleDao);
    }

    public void clear() {
        keywordDaoConfig.getIdentityScope().clear();
        keywordToArticlesDaoConfig.getIdentityScope().clear();
        articleDaoConfig.getIdentityScope().clear();
    }

    public KeywordDao getKeywordDao() {
        return keywordDao;
    }

    public KeywordToArticlesDao getKeywordToArticlesDao() {
        return keywordToArticlesDao;
    }

    public ArticleDao getArticleDao() {
        return articleDao;
    }

}
