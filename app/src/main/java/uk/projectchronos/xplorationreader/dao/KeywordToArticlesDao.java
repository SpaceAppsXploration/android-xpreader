/*
 * Copyright 2014-2015 Project Chronos and Pramantha Ltd
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package uk.projectchronos.xplorationreader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import uk.projectchronos.xplorationreader.model.KeywordToArticles;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "KEYWORD_TO_ARTICLES".
 */
public class KeywordToArticlesDao extends AbstractDao<KeywordToArticles, Long> {

    public static final String TABLENAME = "KEYWORD_TO_ARTICLES";
    private Query<KeywordToArticles> keyword_KeywordToArticlesListQuery;
    private Query<KeywordToArticles> article_KeywordToArticlesListQuery;

    public KeywordToArticlesDao(DaoConfig config) {
        super(config);
    }

    public KeywordToArticlesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEYWORD_TO_ARTICLES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEYWORD_ID\" INTEGER NOT NULL ," + // 1: keywordId
                "\"ARTICLE_ID\" INTEGER NOT NULL );"); // 2: articleId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_KEYWORD_TO_ARTICLES_KEYWORD_ID_ARTICLE_ID ON KEYWORD_TO_ARTICLES" +
                " (\"KEYWORD_ID\",\"ARTICLE_ID\");");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEYWORD_TO_ARTICLES\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, KeywordToArticles entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKeywordId());
        stmt.bindLong(3, entity.getArticleId());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset) ? null : cursor.getLong(offset);
    }

    /**
     * @inheritdoc
     */
    @Override
    public KeywordToArticles readEntity(Cursor cursor, int offset) {
        return new KeywordToArticles( //
                cursor.isNull(offset) ? null : cursor.getLong(offset), // id
                cursor.getLong(offset + 1), // keywordId
                cursor.getLong(offset + 2) // articleId
        );
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, KeywordToArticles entity, int offset) {
        entity.setId(cursor.isNull(offset) ? null : cursor.getLong(offset));
        entity.setKeywordId(cursor.getLong(offset + 1));
        entity.setArticleId(cursor.getLong(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(KeywordToArticles entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(KeywordToArticles entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "keywordToArticlesList" to-many relationship of Keyword.
     */
    public List<KeywordToArticles> _queryKeyword_KeywordToArticlesList(long keywordId) {
        synchronized (this) {
            if (keyword_KeywordToArticlesListQuery == null) {
                QueryBuilder<KeywordToArticles> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.KeywordId.eq(null));
                keyword_KeywordToArticlesListQuery = queryBuilder.build();
            }
        }
        Query<KeywordToArticles> query = keyword_KeywordToArticlesListQuery.forCurrentThread();
        query.setParameter(0, keywordId);
        return query.list();
    }

    /**
     * Internal query to resolve the "keywordToArticlesList" to-many relationship of Article.
     */
    public List<KeywordToArticles> _queryArticle_KeywordToArticlesList(long articleId) {
        synchronized (this) {
            if (article_KeywordToArticlesListQuery == null) {
                QueryBuilder<KeywordToArticles> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ArticleId.eq(null));
                article_KeywordToArticlesListQuery = queryBuilder.build();
            }
        }
        Query<KeywordToArticles> query = article_KeywordToArticlesListQuery.forCurrentThread();
        query.setParameter(0, articleId);
        return query.list();
    }

    /**
     * Gets or inserts the entity provided.
     * It checks using the articleId and keywordId properties (that are declared into the DB unique).
     *
     * @param entity the entity to insert/retrieve to/from DB.
     * @return the id into DB of the entity.
     */
    public long getOrInsert(KeywordToArticles entity) {
        long id;
        QueryBuilder queryBuilder = this.queryBuilder().where(Properties.ArticleId.eq(entity.getArticleId()), Properties.KeywordId.eq(entity.getKeywordId()));

        if (queryBuilder.count() == 1) {
            id = ((KeywordToArticles) queryBuilder.list().get(0)).getId();
        } else {
            id = insert(entity);
        }

        return id;
    }

    /**
     * Properties of entity KeywordToArticles.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KeywordId = new Property(1, long.class, "keywordId", false, "KEYWORD_ID");
        public final static Property ArticleId = new Property(2, long.class, "articleId", false, "ARTICLE_ID");
    }
}
